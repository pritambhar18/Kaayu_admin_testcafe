{
    "sourceFile": "Tests/job-Tests/add_jobs_&_check.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 44,
            "patches": [
                {
                    "date": 1710010182847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1710010222851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,53 +4,53 @@\n //fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n \r\n \r\n \r\n-test('1st test',async t => {\r\n+test('1st test', async t => {\r\n \r\n     //1.Login\r\n     //For class we use .   for id we use #\r\n-    await t.typeText('#username' , 'sushobhan123')\r\n-    await t.typeText('#password' , 'Password@1234')\r\n+    await t.typeText('#username', 'sushobhan123')\r\n+    await t.typeText('#password', 'Password@1234')\r\n     await t.click('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button')\r\n-   // await t.pressKey ('enter')\r\n+    // await t.pressKey ('enter')\r\n \r\n-   //2.Logout\r\n+    //2.Logout\r\n \r\n-   //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n-   //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n-   //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n-   //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n+    //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n+    //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n+    //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n+    //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n \r\n-  //3.Add Job (parent) & check the list that job saved or not\r\n+    //3.Add Job (parent) & check the list that job saved or not\r\n \r\n-  await t.click('body > div > aside.main-sidebar.sidebar-dark-primary.elevation-4 > div > div.os-padding > div > div > nav > ul > li:nth-child(4) > a');\r\n-  await t.click('#topIconPanel > a > span');\r\n-  await t.typeText('#job-title' , 'Software Tester');\r\n+    await t.click('body > div > aside.main-sidebar.sidebar-dark-primary.elevation-4 > div > div.os-padding > div > div > nav > ul > li:nth-child(4) > a');\r\n+    await t.click('#topIconPanel > a > span');\r\n+    await t.typeText('#job-title', 'Software Tester');\r\n \r\n-  //Select company \r\n-   await t.click('#select2-company_id-container');\r\n-   await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input' , 'Lehner, Haag and Smith');\r\n-   await t.wait(5000);\r\n-   await t.click('#select2-company_id-results > li');\r\n-   await t.wait(5000);\r\n+    //Select company \r\n+    await t.click('#select2-company_id-container');\r\n+    await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n+    await t.wait(5000);\r\n+    await t.click('#select2-company_id-results > li');\r\n+    await t.wait(5000);\r\n \r\n \r\n-  \r\n-   // Set Job Description inside iframe\r\n-   const iframeSelector = Selector('#description_ifr');\r\n \r\n-   await t\r\n-       .switchToIframe(iframeSelector)\r\n-       .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n-       .switchToMainWindow()\r\n-       .wait(5000);\r\n+    // Set Job Description inside iframe\r\n+    const iframeSelector = Selector('#description_ifr');\r\n \r\n+    await t\r\n+        .switchToIframe(iframeSelector)\r\n+        .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n+        .switchToMainWindow()\r\n+        .wait(5000);\r\n \r\n-       await t.click('#submit');\r\n-       await t.wait(5000);\r\n \r\n+    await t.click('#submit');\r\n+    await t.wait(5000);\r\n \r\n+\r\n     //Check job in the list page or not \r\n \r\n     const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n \r\n@@ -59,15 +59,15 @@\n \r\n     // Selector for table rows\r\n     const rowSelector = tableSelector.find('tbody tr');\r\n     //const rowSelector = tableSelector.find('#\\32 21');\r\n-    \r\n \r\n+\r\n     // Check if the name is present in any cell of the table\r\n     const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n     //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n-    \r\n \r\n+\r\n     // Print messages to the console based on whether the name is present or not\r\n     if (isNamePresent) {\r\n         console.log(`The name '${nameToCheck}' is present in the table.`);\r\n     } else {\r\n@@ -85,11 +85,4 @@\n \r\n //Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n // For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n \r\n-test.skip('2nd test',async t => {\r\n-\r\n-    await t.typeText('#username' , 'sushobhan123')\r\n-    await t.wait(2000)\r\n-\r\n-    \r\n-})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710010251150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,8 @@\n-import { Selector } from 'testcafe';\r\n+import { ClientFunction, t, Selector } from 'testcafe';\r\n+import LoginPage from '../../Pages/LoginPage';\r\n+import Add_jobs_Pages from '../../Pages/job_pages/Add_jobs_Pages';\r\n+\r\n fixture('Getting Started').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n \r\n //fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n \r\n"
                },
                {
                    "date": 1710010272412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { ClientFunction, t, Selector } from 'testcafe';\r\n import LoginPage from '../../Pages/LoginPage';\r\n import Add_jobs_Pages from '../../Pages/job_pages/Add_jobs_Pages';\r\n \r\n-fixture('Getting Started').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n+fixture('Add job & check exist or not').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n \r\n //fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n \r\n \r\n"
                },
                {
                    "date": 1710010301333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,13 +11,14 @@\n test('1st test', async t => {\r\n \r\n     //1.Login\r\n     //For class we use .   for id we use #\r\n-    await t.typeText('#username', 'sushobhan123')\r\n-    await t.typeText('#password', 'Password@1234')\r\n-    await t.click('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button')\r\n-    // await t.pressKey ('enter')\r\n+    await LoginPage.SetUserName('sushobhan123');\r\n+    await LoginPage.SetPassword('Password@1234');\r\n+    await LoginPage.ClickonLoginButton();\r\n \r\n+   \r\n+\r\n     //2.Logout\r\n \r\n     //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n     //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n"
                },
                {
                    "date": 1710010307741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n     await LoginPage.SetUserName('sushobhan123');\r\n     await LoginPage.SetPassword('Password@1234');\r\n     await LoginPage.ClickonLoginButton();\r\n \r\n-   \r\n \r\n     //2.Logout\r\n \r\n     //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n"
                },
                {
                    "date": 1710010408465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,11 @@\n     //For class we use .   for id we use #\r\n     await LoginPage.SetUserName('sushobhan123');\r\n     await LoginPage.SetPassword('Password@1234');\r\n     await LoginPage.ClickonLoginButton();\r\n+    await Add_jobs_Pages.Click_Jobs();\r\n+    await Add_jobs_Pages.Click_AddJobs();\r\n \r\n-\r\n     //2.Logout\r\n \r\n     //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n     //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n@@ -25,10 +26,9 @@\n     //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n \r\n     //3.Add Job (parent) & check the list that job saved or not\r\n \r\n-    await t.click('body > div > aside.main-sidebar.sidebar-dark-primary.elevation-4 > div > div.os-padding > div > div > nav > ul > li:nth-child(4) > a');\r\n-    await t.click('#topIconPanel > a > span');\r\n+\r\n     await t.typeText('#job-title', 'Software Tester');\r\n \r\n     //Select company \r\n     await t.click('#select2-company_id-container');\r\n"
                },
                {
                    "date": 1710010825704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { ClientFunction, t, Selector } from 'testcafe';\r\n import LoginPage from '../../Pages/LoginPage';\r\n import Add_jobs_Pages from '../../Pages/job_pages/Add_jobs_Pages';\r\n \r\n+const dataset = require('../../data/addcandidate_personal_info.json')\r\n fixture('Add job & check exist or not').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n \r\n //fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n \r\n"
                },
                {
                    "date": 1710012294688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,92 @@\n+import { ClientFunction, t, Selector } from 'testcafe';\r\n+import LoginPage from '../../Pages/LoginPage';\r\n+import Add_jobs_Pages from '../../Pages/job_pages/Add_jobs_Pages';\r\n+\r\n+const dataset = require('../../data/jobs.json')\r\n+fixture('Add job & check exist or not').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n+\r\n+//fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n+\r\n+\r\n+\r\n+test('1st test', async t => {\r\n+\r\n+    //1.Login\r\n+    //For class we use .   for id we use #\r\n+    await LoginPage.SetUserName('sushobhan123');\r\n+    await LoginPage.SetPassword('Password@1234');\r\n+    await LoginPage.ClickonLoginButton();\r\n+    await Add_jobs_Pages.Click_Jobs();\r\n+    await Add_jobs_Pages.Click_AddJobs();\r\n+\r\n+    //2.Logout\r\n+\r\n+    //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n+    //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n+    //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n+    //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n+\r\n+    //3.Add Job (parent) & check the list that job saved or not\r\n+\r\n+\r\n+    await t.typeText('#job-title', 'Software Tester');\r\n+\r\n+    //Select company \r\n+    await t.click('#select2-company_id-container');\r\n+    await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n+    await t.wait(5000);\r\n+    await t.click('#select2-company_id-results > li');\r\n+    await t.wait(5000);\r\n+\r\n+\r\n+\r\n+    // Set Job Description inside iframe\r\n+    const iframeSelector = Selector('#description_ifr');\r\n+\r\n+    await t\r\n+        .switchToIframe(iframeSelector)\r\n+        .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n+        .switchToMainWindow()\r\n+        .wait(5000);\r\n+\r\n+\r\n+    await t.click('#submit');\r\n+    await t.wait(5000);\r\n+\r\n+\r\n+    //Check job in the list page or not \r\n+\r\n+    const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n+\r\n+    // Selector for the table\r\n+    const tableSelector = Selector('#jobDatatable');\r\n+\r\n+    // Selector for table rows\r\n+    const rowSelector = tableSelector.find('tbody tr');\r\n+    //const rowSelector = tableSelector.find('#\\32 21');\r\n+\r\n+\r\n+    // Check if the name is present in any cell of the table\r\n+    const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n+    //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n+\r\n+\r\n+    // Print messages to the console based on whether the name is present or not\r\n+    if (isNamePresent) {\r\n+        console.log(`The name '${nameToCheck}' is present in the table.`);\r\n+    } else {\r\n+        console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n+    }\r\n+\r\n+    //  TestCafe assertions if needed\r\n+    await t.expect(isNamePresent).ok('Name is not present in the table');\r\n+\r\n+\r\n+})\r\n+\r\n+\r\n+\r\n+\r\n+//Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n+// For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n+\r\n"
                },
                {
                    "date": 1710012329736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,178 +7,87 @@\n \r\n //fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n \r\n \r\n+dataset.forEach(data => {\r\n+    test('1st test', async t => {\r\n \r\n-test('1st test', async t => {\r\n+        //1.Login\r\n+        //For class we use .   for id we use #\r\n+        await LoginPage.SetUserName('sushobhan123');\r\n+        await LoginPage.SetPassword('Password@1234');\r\n+        await LoginPage.ClickonLoginButton();\r\n+        await Add_jobs_Pages.Click_Jobs();\r\n+        await Add_jobs_Pages.Click_AddJobs();\r\n \r\n-    //1.Login\r\n-    //For class we use .   for id we use #\r\n-    await LoginPage.SetUserName('sushobhan123');\r\n-    await LoginPage.SetPassword('Password@1234');\r\n-    await LoginPage.ClickonLoginButton();\r\n-    await Add_jobs_Pages.Click_Jobs();\r\n-    await Add_jobs_Pages.Click_AddJobs();\r\n+        //2.Logout\r\n \r\n-    //2.Logout\r\n+        //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n+        //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n+        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n+        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n \r\n-    //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n-    //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n-    //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n-    //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n+        //3.Add Job (parent) & check the list that job saved or not\r\n \r\n-    //3.Add Job (parent) & check the list that job saved or not\r\n \r\n+        await t.typeText('#job-title', 'Software Tester');\r\n \r\n-    await t.typeText('#job-title', 'Software Tester');\r\n+        //Select company \r\n+        await t.click('#select2-company_id-container');\r\n+        await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n+        await t.wait(5000);\r\n+        await t.click('#select2-company_id-results > li');\r\n+        await t.wait(5000);\r\n \r\n-    //Select company \r\n-    await t.click('#select2-company_id-container');\r\n-    await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n-    await t.wait(5000);\r\n-    await t.click('#select2-company_id-results > li');\r\n-    await t.wait(5000);\r\n \r\n \r\n+        // Set Job Description inside iframe\r\n+        const iframeSelector = Selector('#description_ifr');\r\n \r\n-    // Set Job Description inside iframe\r\n-    const iframeSelector = Selector('#description_ifr');\r\n+        await t\r\n+            .switchToIframe(iframeSelector)\r\n+            .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n+            .switchToMainWindow()\r\n+            .wait(5000);\r\n \r\n-    await t\r\n-        .switchToIframe(iframeSelector)\r\n-        .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n-        .switchToMainWindow()\r\n-        .wait(5000);\r\n \r\n+        await t.click('#submit');\r\n+        await t.wait(5000);\r\n \r\n-    await t.click('#submit');\r\n-    await t.wait(5000);\r\n \r\n+        //Check job in the list page or not \r\n \r\n-    //Check job in the list page or not \r\n+        const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n \r\n-    const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n+        // Selector for the table\r\n+        const tableSelector = Selector('#jobDatatable');\r\n \r\n-    // Selector for the table\r\n-    const tableSelector = Selector('#jobDatatable');\r\n+        // Selector for table rows\r\n+        const rowSelector = tableSelector.find('tbody tr');\r\n+        //const rowSelector = tableSelector.find('#\\32 21');\r\n \r\n-    // Selector for table rows\r\n-    const rowSelector = tableSelector.find('tbody tr');\r\n-    //const rowSelector = tableSelector.find('#\\32 21');\r\n \r\n+        // Check if the name is present in any cell of the table\r\n+        const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n+        //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n \r\n-    // Check if the name is present in any cell of the table\r\n-    const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n-    //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n \r\n+        // Print messages to the console based on whether the name is present or not\r\n+        if (isNamePresent) {\r\n+            console.log(`The name '${nameToCheck}' is present in the table.`);\r\n+        } else {\r\n+            console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n+        }\r\n \r\n-    // Print messages to the console based on whether the name is present or not\r\n-    if (isNamePresent) {\r\n-        console.log(`The name '${nameToCheck}' is present in the table.`);\r\n-    } else {\r\n-        console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n-    }\r\n+        //  TestCafe assertions if needed\r\n+        await t.expect(isNamePresent).ok('Name is not present in the table');\r\n \r\n-    //  TestCafe assertions if needed\r\n-    await t.expect(isNamePresent).ok('Name is not present in the table');\r\n \r\n-\r\n+    })\r\n })\r\n \r\n \r\n \r\n \r\n //Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n // For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n \r\n-import { ClientFunction, t, Selector } from 'testcafe';\r\n-import LoginPage from '../../Pages/LoginPage';\r\n-import Add_jobs_Pages from '../../Pages/job_pages/Add_jobs_Pages';\r\n-\r\n-const dataset = require('../../data/addcandidate_personal_info.json')\r\n-fixture('Add job & check exist or not').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n-\r\n-//fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n-\r\n-\r\n-\r\n-test('1st test', async t => {\r\n-\r\n-    //1.Login\r\n-    //For class we use .   for id we use #\r\n-    await LoginPage.SetUserName('sushobhan123');\r\n-    await LoginPage.SetPassword('Password@1234');\r\n-    await LoginPage.ClickonLoginButton();\r\n-    await Add_jobs_Pages.Click_Jobs();\r\n-    await Add_jobs_Pages.Click_AddJobs();\r\n-\r\n-    //2.Logout\r\n-\r\n-    //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n-    //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n-    //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n-    //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n-\r\n-    //3.Add Job (parent) & check the list that job saved or not\r\n-\r\n-\r\n-    await t.typeText('#job-title', 'Software Tester');\r\n-\r\n-    //Select company \r\n-    await t.click('#select2-company_id-container');\r\n-    await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n-    await t.wait(5000);\r\n-    await t.click('#select2-company_id-results > li');\r\n-    await t.wait(5000);\r\n-\r\n-\r\n-\r\n-    // Set Job Description inside iframe\r\n-    const iframeSelector = Selector('#description_ifr');\r\n-\r\n-    await t\r\n-        .switchToIframe(iframeSelector)\r\n-        .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n-        .switchToMainWindow()\r\n-        .wait(5000);\r\n-\r\n-\r\n-    await t.click('#submit');\r\n-    await t.wait(5000);\r\n-\r\n-\r\n-    //Check job in the list page or not \r\n-\r\n-    const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n-\r\n-    // Selector for the table\r\n-    const tableSelector = Selector('#jobDatatable');\r\n-\r\n-    // Selector for table rows\r\n-    const rowSelector = tableSelector.find('tbody tr');\r\n-    //const rowSelector = tableSelector.find('#\\32 21');\r\n-\r\n-\r\n-    // Check if the name is present in any cell of the table\r\n-    const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n-    //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n-\r\n-\r\n-    // Print messages to the console based on whether the name is present or not\r\n-    if (isNamePresent) {\r\n-        console.log(`The name '${nameToCheck}' is present in the table.`);\r\n-    } else {\r\n-        console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n-    }\r\n-\r\n-    //  TestCafe assertions if needed\r\n-    await t.expect(isNamePresent).ok('Name is not present in the table');\r\n-\r\n-\r\n-})\r\n-\r\n-\r\n-\r\n-\r\n-//Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n-// For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n-\r\n"
                },
                {
                    "date": 1710012381987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n         await LoginPage.SetPassword('Password@1234');\r\n         await LoginPage.ClickonLoginButton();\r\n         await Add_jobs_Pages.Click_Jobs();\r\n         await Add_jobs_Pages.Click_AddJobs();\r\n+        await Add_jobs_Pages.Job_Title(data.job_title)\r\n \r\n         //2.Logout\r\n \r\n         //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n"
                },
                {
                    "date": 1710012404271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n         await LoginPage.ClickonLoginButton();\r\n         await Add_jobs_Pages.Click_Jobs();\r\n         await Add_jobs_Pages.Click_AddJobs();\r\n         await Add_jobs_Pages.Job_Title(data.job_title)\r\n+        await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n \r\n         //2.Logout\r\n \r\n         //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n"
                },
                {
                    "date": 1710012427467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n         await Add_jobs_Pages.Click_Jobs();\r\n         await Add_jobs_Pages.Click_AddJobs();\r\n         await Add_jobs_Pages.Job_Title(data.job_title)\r\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n+        await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n \r\n         //2.Logout\r\n \r\n         //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n"
                },
                {
                    "date": 1710012837106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n //fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n \r\n \r\n dataset.forEach(data => {\r\n-    test('1st test', async t => {\r\n+    test(`Add job & check - ${data.expectedResult}`, async t => {\r\n \r\n         //1.Login\r\n         //For class we use .   for id we use #\r\n         await LoginPage.SetUserName('sushobhan123');\r\n"
                },
                {
                    "date": 1710012866821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \r\n         //3.Add Job (parent) & check the list that job saved or not\r\n \r\n \r\n-        await t.typeText('#job-title', 'Software Tester');\r\n+      /*  await t.typeText('#job-title', 'Software Tester');\r\n \r\n         //Select company \r\n         await t.click('#select2-company_id-container');\r\n         await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n@@ -81,9 +81,9 @@\n             console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n         }\r\n \r\n         //  TestCafe assertions if needed\r\n-        await t.expect(isNamePresent).ok('Name is not present in the table');\r\n+        await t.expect(isNamePresent).ok('Name is not present in the table');*/\r\n \r\n \r\n     })\r\n })\r\n"
                },
                {
                    "date": 1710013957995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         await Add_jobs_Pages.Click_AddJobs();\r\n         await Add_jobs_Pages.Job_Title(data.job_title)\r\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n-\r\n+        await t.expect(await Add_jobs_Pages.table_data.textContent).notContains(searchemail)\r\n         //2.Logout\r\n \r\n         //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n         //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n"
                },
                {
                    "date": 1710014017298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         await Add_jobs_Pages.Click_AddJobs();\r\n         await Add_jobs_Pages.Job_Title(data.job_title)\r\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n-        await t.expect(await Add_jobs_Pages.table_data.textContent).notContains(searchemail)\r\n+        await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         //2.Logout\r\n \r\n         //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n         //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n"
                },
                {
                    "date": 1710014118206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import { ClientFunction, t, Selector } from 'testcafe';\r\n+import LoginPage from '../../Pages/LoginPage';\r\n+import Add_jobs_Pages from '../../Pages/job_pages/Add_jobs_Pages';\r\n+\r\n+const dataset = require('../../data/jobs.json')\r\n+fixture('Add job & check exist or not').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n+\r\n+//fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n+\r\n+\r\n+dataset.forEach(data => {\r\n+    test(`Add job & check - ${data.expectedResult}`, async t => {\r\n+\r\n+        //1.Login\r\n+        //For class we use .   for id we use #\r\n+        await LoginPage.SetUserName('sushobhan123');\r\n+        await LoginPage.SetPassword('Password@1234');\r\n+        await LoginPage.ClickonLoginButton();\r\n+        await Add_jobs_Pages.Click_Jobs();\r\n+        await Add_jobs_Pages.Click_AddJobs();\r\n+        await Add_jobs_Pages.Job_Title(data.job_title)\r\n+        await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n+        await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n+        await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n+        .then(() => {\r\n+            console.log(`data is present in the list. job title:${data.job_title}`);\r\n+        })\r\n+        .catch(error => {\r\n+            console.error(`data is not present in the list. job title:${data.job_title}. Error: ${error}`);\r\n+        })\r\n+        //2.Logout\r\n+\r\n+        //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n+        //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n+        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n+        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n+\r\n+        //3.Add Job (parent) & check the list that job saved or not\r\n+\r\n+\r\n+      /*  await t.typeText('#job-title', 'Software Tester');\r\n+\r\n+        //Select company \r\n+        await t.click('#select2-company_id-container');\r\n+        await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n+        await t.wait(5000);\r\n+        await t.click('#select2-company_id-results > li');\r\n+        await t.wait(5000);\r\n+\r\n+\r\n+\r\n+        // Set Job Description inside iframe\r\n+        const iframeSelector = Selector('#description_ifr');\r\n+\r\n+        await t\r\n+            .switchToIframe(iframeSelector)\r\n+            .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n+            .switchToMainWindow()\r\n+            .wait(5000);\r\n+\r\n+\r\n+        await t.click('#submit');\r\n+        await t.wait(5000);\r\n+\r\n+\r\n+        //Check job in the list page or not \r\n+\r\n+        const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n+\r\n+        // Selector for the table\r\n+        const tableSelector = Selector('#jobDatatable');\r\n+\r\n+        // Selector for table rows\r\n+        const rowSelector = tableSelector.find('tbody tr');\r\n+        //const rowSelector = tableSelector.find('#\\32 21');\r\n+\r\n+\r\n+        // Check if the name is present in any cell of the table\r\n+        const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n+        //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n+\r\n+\r\n+        // Print messages to the console based on whether the name is present or not\r\n+        if (isNamePresent) {\r\n+            console.log(`The name '${nameToCheck}' is present in the table.`);\r\n+        } else {\r\n+            console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n+        }\r\n+\r\n+        //  TestCafe assertions if needed\r\n+        await t.expect(isNamePresent).ok('Name is not present in the table');*/\r\n+\r\n+\r\n+    })\r\n+})\r\n+\r\n+\r\n+\r\n+\r\n+//Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n+// For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n+\r\n"
                },
                {
                    "date": 1710014636096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n         await Add_jobs_Pages.Click_AddJobs();\r\n         await Add_jobs_Pages.Job_Title(data.job_title)\r\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n+        await\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n         })\r\n@@ -99,100 +100,4 @@\n \r\n //Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n // For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n \r\n-import { ClientFunction, t, Selector } from 'testcafe';\r\n-import LoginPage from '../../Pages/LoginPage';\r\n-import Add_jobs_Pages from '../../Pages/job_pages/Add_jobs_Pages';\r\n-\r\n-const dataset = require('../../data/jobs.json')\r\n-fixture('Add job & check exist or not').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n-\r\n-//fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n-\r\n-\r\n-dataset.forEach(data => {\r\n-    test(`Add job & check - ${data.expectedResult}`, async t => {\r\n-\r\n-        //1.Login\r\n-        //For class we use .   for id we use #\r\n-        await LoginPage.SetUserName('sushobhan123');\r\n-        await LoginPage.SetPassword('Password@1234');\r\n-        await LoginPage.ClickonLoginButton();\r\n-        await Add_jobs_Pages.Click_Jobs();\r\n-        await Add_jobs_Pages.Click_AddJobs();\r\n-        await Add_jobs_Pages.Job_Title(data.job_title)\r\n-        await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n-        await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n-        await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n-        //2.Logout\r\n-\r\n-        //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n-        //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n-        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n-        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n-\r\n-        //3.Add Job (parent) & check the list that job saved or not\r\n-\r\n-\r\n-      /*  await t.typeText('#job-title', 'Software Tester');\r\n-\r\n-        //Select company \r\n-        await t.click('#select2-company_id-container');\r\n-        await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n-        await t.wait(5000);\r\n-        await t.click('#select2-company_id-results > li');\r\n-        await t.wait(5000);\r\n-\r\n-\r\n-\r\n-        // Set Job Description inside iframe\r\n-        const iframeSelector = Selector('#description_ifr');\r\n-\r\n-        await t\r\n-            .switchToIframe(iframeSelector)\r\n-            .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n-            .switchToMainWindow()\r\n-            .wait(5000);\r\n-\r\n-\r\n-        await t.click('#submit');\r\n-        await t.wait(5000);\r\n-\r\n-\r\n-        //Check job in the list page or not \r\n-\r\n-        const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n-\r\n-        // Selector for the table\r\n-        const tableSelector = Selector('#jobDatatable');\r\n-\r\n-        // Selector for table rows\r\n-        const rowSelector = tableSelector.find('tbody tr');\r\n-        //const rowSelector = tableSelector.find('#\\32 21');\r\n-\r\n-\r\n-        // Check if the name is present in any cell of the table\r\n-        const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n-        //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n-\r\n-\r\n-        // Print messages to the console based on whether the name is present or not\r\n-        if (isNamePresent) {\r\n-            console.log(`The name '${nameToCheck}' is present in the table.`);\r\n-        } else {\r\n-            console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n-        }\r\n-\r\n-        //  TestCafe assertions if needed\r\n-        await t.expect(isNamePresent).ok('Name is not present in the table');*/\r\n-\r\n-\r\n-    })\r\n-})\r\n-\r\n-\r\n-\r\n-\r\n-//Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n-// For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n-\r\n"
                },
                {
                    "date": 1710014651255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         await Add_jobs_Pages.Click_AddJobs();\r\n         await Add_jobs_Pages.Job_Title(data.job_title)\r\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n-        await\r\n+        await Add_jobs_Pages.Click_Submit();\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n         })\r\n"
                },
                {
                    "date": 1710014818383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n         await Add_jobs_Pages.Job_Title(data.job_title)\r\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n+        console.log(await Add_jobs_Pages.table_data.textContent)\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n         })\r\n"
                },
                {
                    "date": 1710014850896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         await Add_jobs_Pages.Job_Title(data.job_title)\r\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n-        console.log(await Add_jobs_Pages.table_data.textContent)\r\n+        console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n         })\r\n"
                },
                {
                    "date": 1710015119744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+import { ClientFunction, t, Selector } from 'testcafe';\r\n+import LoginPage from '../../Pages/LoginPage';\r\n+import Add_jobs_Pages from '../../Pages/job_pages/Add_jobs_Pages';\r\n+\r\n+const dataset = require('../../data/jobs.json')\r\n+fixture('Add job & check exist or not').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n+\r\n+//fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n+\r\n+\r\n+dataset.forEach(data => {\r\n+    test(`Add job & check - ${data.expectedResult}`, async t => {\r\n+\r\n+        //1.Login\r\n+        //For class we use .   for id we use #\r\n+        await LoginPage.SetUserName('sushobhan123');\r\n+        await LoginPage.SetPassword('Password@1234');\r\n+        await LoginPage.ClickonLoginButton();\r\n+        await Add_jobs_Pages.Click_Jobs();\r\n+        await Add_jobs_Pages.Click_AddJobs();\r\n+        await Add_jobs_Pages.Job_Title(data.job_title)\r\n+        await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n+        await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n+        await Add_jobs_Pages.Click_Submit();\r\n+        console.log(\"log\",await Add_jobs_Pages.table_data.innerText)\r\n+        await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n+        .then(() => {\r\n+            console.log(`data is present in the list. job title:${data.job_title}`);\r\n+        })\r\n+        .catch(error => {\r\n+            console.error(`data is not present in the list. job title:${data.job_title}. Error: ${error}`);\r\n+        })\r\n+        //2.Logout\r\n+\r\n+        //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n+        //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n+        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n+        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n+\r\n+        //3.Add Job (parent) & check the list that job saved or not\r\n+\r\n+\r\n+      /*  await t.typeText('#job-title', 'Software Tester');\r\n+\r\n+        //Select company \r\n+        await t.click('#select2-company_id-container');\r\n+        await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n+        await t.wait(5000);\r\n+        await t.click('#select2-company_id-results > li');\r\n+        await t.wait(5000);\r\n+\r\n+\r\n+\r\n+        // Set Job Description inside iframe\r\n+        const iframeSelector = Selector('#description_ifr');\r\n+\r\n+        await t\r\n+            .switchToIframe(iframeSelector)\r\n+            .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n+            .switchToMainWindow()\r\n+            .wait(5000);\r\n+\r\n+\r\n+        await t.click('#submit');\r\n+        await t.wait(5000);\r\n+\r\n+\r\n+        //Check job in the list page or not \r\n+\r\n+        const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n+\r\n+        // Selector for the table\r\n+        const tableSelector = Selector('#jobDatatable');\r\n+\r\n+        // Selector for table rows\r\n+        const rowSelector = tableSelector.find('tbody tr');\r\n+        //const rowSelector = tableSelector.find('#\\32 21');\r\n+\r\n+\r\n+        // Check if the name is present in any cell of the table\r\n+        const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n+        //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n+\r\n+\r\n+        // Print messages to the console based on whether the name is present or not\r\n+        if (isNamePresent) {\r\n+            console.log(`The name '${nameToCheck}' is present in the table.`);\r\n+        } else {\r\n+            console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n+        }\r\n+\r\n+        //  TestCafe assertions if needed\r\n+        await t.expect(isNamePresent).ok('Name is not present in the table');*/\r\n+\r\n+\r\n+    })\r\n+})\r\n+\r\n+\r\n+\r\n+\r\n+//Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n+// For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n+\r\n"
                },
                {
                    "date": 1710015796064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n         console.log(\"log\",await Add_jobs_Pages.table_data.innerText)\r\n+        const actual_data = await Add_jobs_Pages.table_data.getAttribute('Add_jobs_Pages.table_data')\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n         })\r\n@@ -101,108 +102,4 @@\n \r\n //Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n // For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n \r\n-import { ClientFunction, t, Selector } from 'testcafe';\r\n-import LoginPage from '../../Pages/LoginPage';\r\n-import Add_jobs_Pages from '../../Pages/job_pages/Add_jobs_Pages';\r\n-\r\n-const dataset = require('../../data/jobs.json')\r\n-fixture('Add job & check exist or not').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n-\r\n-//fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n-\r\n-\r\n-dataset.forEach(data => {\r\n-    test(`Add job & check - ${data.expectedResult}`, async t => {\r\n-\r\n-        //1.Login\r\n-        //For class we use .   for id we use #\r\n-        await LoginPage.SetUserName('sushobhan123');\r\n-        await LoginPage.SetPassword('Password@1234');\r\n-        await LoginPage.ClickonLoginButton();\r\n-        await Add_jobs_Pages.Click_Jobs();\r\n-        await Add_jobs_Pages.Click_AddJobs();\r\n-        await Add_jobs_Pages.Job_Title(data.job_title)\r\n-        await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n-        await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n-        await Add_jobs_Pages.Click_Submit();\r\n-        console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n-        await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n-        .then(() => {\r\n-            console.log(`data is present in the list. job title:${data.job_title}`);\r\n-        })\r\n-        .catch(error => {\r\n-            console.error(`data is not present in the list. job title:${data.job_title}. Error: ${error}`);\r\n-        })\r\n-        //2.Logout\r\n-\r\n-        //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n-        //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n-        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n-        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n-\r\n-        //3.Add Job (parent) & check the list that job saved or not\r\n-\r\n-\r\n-      /*  await t.typeText('#job-title', 'Software Tester');\r\n-\r\n-        //Select company \r\n-        await t.click('#select2-company_id-container');\r\n-        await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n-        await t.wait(5000);\r\n-        await t.click('#select2-company_id-results > li');\r\n-        await t.wait(5000);\r\n-\r\n-\r\n-\r\n-        // Set Job Description inside iframe\r\n-        const iframeSelector = Selector('#description_ifr');\r\n-\r\n-        await t\r\n-            .switchToIframe(iframeSelector)\r\n-            .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n-            .switchToMainWindow()\r\n-            .wait(5000);\r\n-\r\n-\r\n-        await t.click('#submit');\r\n-        await t.wait(5000);\r\n-\r\n-\r\n-        //Check job in the list page or not \r\n-\r\n-        const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n-\r\n-        // Selector for the table\r\n-        const tableSelector = Selector('#jobDatatable');\r\n-\r\n-        // Selector for table rows\r\n-        const rowSelector = tableSelector.find('tbody tr');\r\n-        //const rowSelector = tableSelector.find('#\\32 21');\r\n-\r\n-\r\n-        // Check if the name is present in any cell of the table\r\n-        const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n-        //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n-\r\n-\r\n-        // Print messages to the console based on whether the name is present or not\r\n-        if (isNamePresent) {\r\n-            console.log(`The name '${nameToCheck}' is present in the table.`);\r\n-        } else {\r\n-            console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n-        }\r\n-\r\n-        //  TestCafe assertions if needed\r\n-        await t.expect(isNamePresent).ok('Name is not present in the table');*/\r\n-\r\n-\r\n-    })\r\n-})\r\n-\r\n-\r\n-\r\n-\r\n-//Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n-// For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n-\r\n"
                },
                {
                    "date": 1710015859888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n         console.log(\"log\",await Add_jobs_Pages.table_data.innerText)\r\n         const actual_data = await Add_jobs_Pages.table_data.getAttribute('Add_jobs_Pages.table_data')\r\n+        console.log('log2',actual_data)\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n         })\r\n"
                },
                {
                    "date": 1710016125441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         await Add_jobs_Pages.Job_Title(data.job_title)\r\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n-        console.log(\"log\",await Add_jobs_Pages.table_data.innerText)\r\n+        console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n         const actual_data = await Add_jobs_Pages.table_data.getAttribute('Add_jobs_Pages.table_data')\r\n         console.log('log2',actual_data)\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n"
                },
                {
                    "date": 1710016434450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n         console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n-        const actual_data = await Add_jobs_Pages.table_data.getAttribute('Add_jobs_Pages.table_data')\r\n+        const actual_data = Selector(('tbody tr').nth(3).find('span[data-bs-toggle=\"tooltip\"]').getAttribute('data-bs-original-title'))\r\n         console.log('log2',actual_data)\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n"
                },
                {
                    "date": 1710016561905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n         console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n-        const actual_data = Selector(('tbody tr').nth(3).find('span[data-bs-toggle=\"tooltip\"]').getAttribute('data-bs-original-title'))\r\n+        const actual_data = Selector('tbody tr').child('td').child('a').child('span[data-bs-toggle=\"tooltip\"]').getAttribute('data-bs-original-title');\r\n         console.log('log2',actual_data)\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n"
                },
                {
                    "date": 1710016949598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n         console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n-        const actual_data = Selector('tbody tr').child('td').child('a').child('span[data-bs-toggle=\"tooltip\"]').getAttribute('data-bs-original-title');\r\n+        const actual_data = Selector('#job-table > tbody  td:nth-child(3) > a > span').getAttribute('data-bs-original-title');\r\n         console.log('log2',actual_data)\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n"
                },
                {
                    "date": 1710017010376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,106 @@\n+import { ClientFunction, t, Selector } from 'testcafe';\r\n+import LoginPage from '../../Pages/LoginPage';\r\n+import Add_jobs_Pages from '../../Pages/job_pages/Add_jobs_Pages';\r\n+\r\n+const dataset = require('../../data/jobs.json')\r\n+fixture('Add job & check exist or not').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n+\r\n+//fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n+\r\n+\r\n+dataset.forEach(data => {\r\n+    test(`Add job & check - ${data.expectedResult}`, async t => {\r\n+\r\n+        //1.Login\r\n+        //For class we use .   for id we use #\r\n+        await LoginPage.SetUserName('sushobhan123');\r\n+        await LoginPage.SetPassword('Password@1234');\r\n+        await LoginPage.ClickonLoginButton();\r\n+        await Add_jobs_Pages.Click_Jobs();\r\n+        await Add_jobs_Pages.Click_AddJobs();\r\n+        await Add_jobs_Pages.Job_Title(data.job_title)\r\n+        await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n+        await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n+        await Add_jobs_Pages.Click_Submit();\r\n+        console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n+        const actual_data = Selector('#job-table > tbody  td:nth-child(3) > a > span').getAttribute('data-bs-original-title').textContent;\r\n+        console.log('log2',actual_data)\r\n+        await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n+        .then(() => {\r\n+            console.log(`data is present in the list. job title:${data.job_title}`);\r\n+        })\r\n+        .catch(error => {\r\n+            console.error(`data is not present in the list. job title:${data.job_title}. Error: ${error}`);\r\n+        })\r\n+        //2.Logout\r\n+\r\n+        //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n+        //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n+        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n+        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n+\r\n+        //3.Add Job (parent) & check the list that job saved or not\r\n+\r\n+\r\n+      /*  await t.typeText('#job-title', 'Software Tester');\r\n+\r\n+        //Select company \r\n+        await t.click('#select2-company_id-container');\r\n+        await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n+        await t.wait(5000);\r\n+        await t.click('#select2-company_id-results > li');\r\n+        await t.wait(5000);\r\n+\r\n+\r\n+\r\n+        // Set Job Description inside iframe\r\n+        const iframeSelector = Selector('#description_ifr');\r\n+\r\n+        await t\r\n+            .switchToIframe(iframeSelector)\r\n+            .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n+            .switchToMainWindow()\r\n+            .wait(5000);\r\n+\r\n+\r\n+        await t.click('#submit');\r\n+        await t.wait(5000);\r\n+\r\n+\r\n+        //Check job in the list page or not \r\n+\r\n+        const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n+\r\n+        // Selector for the table\r\n+        const tableSelector = Selector('#jobDatatable');\r\n+\r\n+        // Selector for table rows\r\n+        const rowSelector = tableSelector.find('tbody tr');\r\n+        //const rowSelector = tableSelector.find('#\\32 21');\r\n+\r\n+\r\n+        // Check if the name is present in any cell of the table\r\n+        const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n+        //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n+\r\n+\r\n+        // Print messages to the console based on whether the name is present or not\r\n+        if (isNamePresent) {\r\n+            console.log(`The name '${nameToCheck}' is present in the table.`);\r\n+        } else {\r\n+            console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n+        }\r\n+\r\n+        //  TestCafe assertions if needed\r\n+        await t.expect(isNamePresent).ok('Name is not present in the table');*/\r\n+\r\n+\r\n+    })\r\n+})\r\n+\r\n+\r\n+\r\n+\r\n+//Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n+// For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n+\r\n"
                },
                {
                    "date": 1710017090787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n         console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n-        const actual_data = Selector('#job-table > tbody  td:nth-child(3) > a > span').getAttribute('data-bs-original-title').textContent;\r\n+        const actual_data = Selector('#job-table > tbody  td:nth-child(3) > a > span');\r\n         console.log('log2',actual_data)\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n@@ -103,110 +103,4 @@\n \r\n //Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n // For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n \r\n-import { ClientFunction, t, Selector } from 'testcafe';\r\n-import LoginPage from '../../Pages/LoginPage';\r\n-import Add_jobs_Pages from '../../Pages/job_pages/Add_jobs_Pages';\r\n-\r\n-const dataset = require('../../data/jobs.json')\r\n-fixture('Add job & check exist or not').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n-\r\n-//fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n-\r\n-\r\n-dataset.forEach(data => {\r\n-    test(`Add job & check - ${data.expectedResult}`, async t => {\r\n-\r\n-        //1.Login\r\n-        //For class we use .   for id we use #\r\n-        await LoginPage.SetUserName('sushobhan123');\r\n-        await LoginPage.SetPassword('Password@1234');\r\n-        await LoginPage.ClickonLoginButton();\r\n-        await Add_jobs_Pages.Click_Jobs();\r\n-        await Add_jobs_Pages.Click_AddJobs();\r\n-        await Add_jobs_Pages.Job_Title(data.job_title)\r\n-        await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n-        await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n-        await Add_jobs_Pages.Click_Submit();\r\n-        console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n-        const actual_data = Selector('#job-table > tbody  td:nth-child(3) > a > span').getAttribute('data-bs-original-title');\r\n-        console.log('log2',actual_data)\r\n-        await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n-        .then(() => {\r\n-            console.log(`data is present in the list. job title:${data.job_title}`);\r\n-        })\r\n-        .catch(error => {\r\n-            console.error(`data is not present in the list. job title:${data.job_title}. Error: ${error}`);\r\n-        })\r\n-        //2.Logout\r\n-\r\n-        //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n-        //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n-        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n-        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n-\r\n-        //3.Add Job (parent) & check the list that job saved or not\r\n-\r\n-\r\n-      /*  await t.typeText('#job-title', 'Software Tester');\r\n-\r\n-        //Select company \r\n-        await t.click('#select2-company_id-container');\r\n-        await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n-        await t.wait(5000);\r\n-        await t.click('#select2-company_id-results > li');\r\n-        await t.wait(5000);\r\n-\r\n-\r\n-\r\n-        // Set Job Description inside iframe\r\n-        const iframeSelector = Selector('#description_ifr');\r\n-\r\n-        await t\r\n-            .switchToIframe(iframeSelector)\r\n-            .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n-            .switchToMainWindow()\r\n-            .wait(5000);\r\n-\r\n-\r\n-        await t.click('#submit');\r\n-        await t.wait(5000);\r\n-\r\n-\r\n-        //Check job in the list page or not \r\n-\r\n-        const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n-\r\n-        // Selector for the table\r\n-        const tableSelector = Selector('#jobDatatable');\r\n-\r\n-        // Selector for table rows\r\n-        const rowSelector = tableSelector.find('tbody tr');\r\n-        //const rowSelector = tableSelector.find('#\\32 21');\r\n-\r\n-\r\n-        // Check if the name is present in any cell of the table\r\n-        const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n-        //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n-\r\n-\r\n-        // Print messages to the console based on whether the name is present or not\r\n-        if (isNamePresent) {\r\n-            console.log(`The name '${nameToCheck}' is present in the table.`);\r\n-        } else {\r\n-            console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n-        }\r\n-\r\n-        //  TestCafe assertions if needed\r\n-        await t.expect(isNamePresent).ok('Name is not present in the table');*/\r\n-\r\n-\r\n-    })\r\n-})\r\n-\r\n-\r\n-\r\n-\r\n-//Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n-// For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n-\r\n"
                },
                {
                    "date": 1710017113319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n         await Add_jobs_Pages.Click_Submit();\r\n         console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n         const actual_data = Selector('#job-table > tbody  td:nth-child(3) > a > span');\r\n         console.log('log2',actual_data)\r\n+        console.log('log3',actual_data.textContent)\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n         })\r\n"
                },
                {
                    "date": 1710017330284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n         console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n-        const actual_data = Selector('#job-table > tbody  td:nth-child(3) > a > span');\r\n+        const actual_data = Selector('#job-table tbody tr td:nth-child(3) span');\r\n         console.log('log2',actual_data)\r\n         console.log('log3',actual_data.textContent)\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n"
                },
                {
                    "date": 1710017453903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         await Add_jobs_Pages.Click_Submit();\r\n         console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n         const actual_data = Selector('#job-table tbody tr td:nth-child(3) span');\r\n         console.log('log2',actual_data)\r\n-        console.log('log3',actual_data.textContent)\r\n+        console.log('log3',actual_data.innerText)\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n         })\r\n"
                },
                {
                    "date": 1710017568637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n         console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n-        const actual_data = Selector('#job-table tbody tr td:nth-child(3) span');\r\n+        const actual_data =await Selector('#job-table tbody tr td:nth-child(3) span');\r\n         console.log('log2',actual_data)\r\n         console.log('log3',actual_data.innerText)\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n"
                },
                {
                    "date": 1710017684312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n         console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n-        const actual_data =await Selector('#job-table tbody tr td:nth-child(3) span');\r\n+        const actual_data = Selector('#job-table tbody tr td:nth-child(3) span').getAttribute('data-bs-original-title').innerText;\r\n         console.log('log2',actual_data)\r\n         console.log('log3',actual_data.innerText)\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n"
                },
                {
                    "date": 1710017869805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n         console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n-        const actual_data = Selector('#job-table tbody tr td:nth-child(3) span').getAttribute('data-bs-original-title').innerText;\r\n+        const actual_data = Selector('#job-table tbody tr td:nth-child(3) span').hasAttribute('data-bs-original-title').innerText;\r\n         console.log('log2',actual_data)\r\n         console.log('log3',actual_data.innerText)\r\n         await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n"
                },
                {
                    "date": 1710018082982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,12 @@\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n         console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n-        const actual_data = Selector('#job-table tbody tr td:nth-child(3) span').hasAttribute('data-bs-original-title').innerText;\r\n+        const actual_data = Selector('#job-table tbody');\r\n         console.log('log2',actual_data)\r\n         console.log('log3',actual_data.innerText)\r\n-        await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n+        await t.expect(await Add_jobs_Pages.table_data.textContent).find(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n         })\r\n         .catch(error => {\r\n"
                },
                {
                    "date": 1710018156410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,13 +21,13 @@\n         await Add_jobs_Pages.Job_Title(data.job_title)\r\n         await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n         await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n         await Add_jobs_Pages.Click_Submit();\r\n-        console.log(\"log\",await Add_jobs_Pages.table_data.textContent)\r\n+        \r\n         const actual_data = Selector('#job-table tbody');\r\n         console.log('log2',actual_data)\r\n         console.log('log3',actual_data.innerText)\r\n-        await t.expect(await Add_jobs_Pages.table_data.textContent).find(data.job_title)\r\n+        await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n         })\r\n         .catch(error => {\r\n"
                },
                {
                    "date": 1710018222568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         \r\n         const actual_data = Selector('#job-table tbody');\r\n         console.log('log2',actual_data)\r\n         console.log('log3',actual_data.innerText)\r\n-        await t.expect(await Add_jobs_Pages.table_data.textContent).contains(data.job_title)\r\n+        await t.expect(await actual_data.textContent).contains(data.job_title)\r\n         .then(() => {\r\n             console.log(`data is present in the list. job title:${data.job_title}`);\r\n         })\r\n         .catch(error => {\r\n"
                },
                {
                    "date": 1710080029930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+import { ClientFunction, t, Selector } from 'testcafe';\r\n+import LoginPage from '../../Pages/LoginPage';\r\n+import Add_jobs_Pages from '../../Pages/job_pages/Add_jobs_Pages';\r\n+\r\n+const dataset = require('../../data/jobs.json')\r\n+fixture('Add job & check exist or not').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n+\r\n+//fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n+\r\n+\r\n+dataset.forEach(data => {\r\n+    test(`Add job & check - ${data.expectedResult}`, async t => {\r\n+\r\n+        //1.Login\r\n+        //For class we use .   for id we use #\r\n+        await LoginPage.SetUserName('sushobhan123');\r\n+        await LoginPage.SetPassword('Password@1234');\r\n+        await LoginPage.ClickonLoginButton();\r\n+        await Add_jobs_Pages.Click_Jobs();\r\n+        await Add_jobs_Pages.Click_AddJobs();\r\n+        await Add_jobs_Pages.Job_Title(data.job_title)\r\n+        await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n+        await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n+        await Add_jobs_Pages.Click_Submit();\r\n+        \r\n+        /*const actual_data = Selector('#job-table tbody');\r\n+        console.log('log2',actual_data)\r\n+        console.log('log3',actual_data.innerText)\r\n+        await t.expect(await actual_data.textContent).contains(data.job_title)\r\n+        .then(() => {\r\n+            console.log(`data is present in the list. job title:${data.job_title}`);\r\n+        })\r\n+        .catch(error => {\r\n+            console.error(`data is not present in the list. job title:${data.job_title}. Error: ${error}`);\r\n+        })*/\r\n+\r\n+        \r\n+        const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n+\r\n+        // Selector for the table\r\n+        const tableSelector = Selector('#jobDatatable');\r\n+\r\n+        // Selector for table rows\r\n+        const rowSelector = tableSelector.find('tbody tr');\r\n+        //const rowSelector = tableSelector.find('#\\32 21');\r\n+\r\n+\r\n+        // Check if the name is present in any cell of the table\r\n+        const isNamePresent = await rowSelector.withText(data.job_title).exists;\r\n+        //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n+\r\n+\r\n+        // Print messages to the console based on whether the name is present or not\r\n+        if (isNamePresent) {\r\n+            console.log(`The name '${nameToCheck}' is present in the table.`);\r\n+        } else {\r\n+            console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n+        }\r\n+\r\n+        //  TestCafe assertions if needed\r\n+        await t.expect(isNamePresent).ok('Name is not present in the table');\r\n+\r\n+        //2.Logout\r\n+\r\n+        //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n+        //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n+        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n+        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n+\r\n+        //3.Add Job (parent) & check the list that job saved or not\r\n+\r\n+\r\n+      /*  await t.typeText('#job-title', 'Software Tester');\r\n+\r\n+        //Select company \r\n+        await t.click('#select2-company_id-container');\r\n+        await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n+        await t.wait(5000);\r\n+        await t.click('#select2-company_id-results > li');\r\n+        await t.wait(5000);\r\n+\r\n+\r\n+\r\n+        // Set Job Description inside iframe\r\n+        const iframeSelector = Selector('#description_ifr');\r\n+\r\n+        await t\r\n+            .switchToIframe(iframeSelector)\r\n+            .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n+            .switchToMainWindow()\r\n+            .wait(5000);\r\n+\r\n+\r\n+        await t.click('#submit');\r\n+        await t.wait(5000);\r\n+\r\n+\r\n+        //Check job in the list page or not \r\n+\r\n+        const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n+\r\n+        // Selector for the table\r\n+        const tableSelector = Selector('#jobDatatable');\r\n+\r\n+        // Selector for table rows\r\n+        const rowSelector = tableSelector.find('tbody tr');\r\n+        //const rowSelector = tableSelector.find('#\\32 21');\r\n+\r\n+\r\n+        // Check if the name is present in any cell of the table\r\n+        const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n+        //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n+\r\n+\r\n+        // Print messages to the console based on whether the name is present or not\r\n+        if (isNamePresent) {\r\n+            console.log(`The name '${nameToCheck}' is present in the table.`);\r\n+        } else {\r\n+            console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n+        }\r\n+\r\n+        //  TestCafe assertions if needed\r\n+        await t.expect(isNamePresent).ok('Name is not present in the table');*/\r\n+\r\n+\r\n+    })\r\n+})\r\n+\r\n+\r\n+\r\n+\r\n+//Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n+// For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n+\r\n"
                },
                {
                    "date": 1710080044838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,11 @@\n \r\n \r\n         // Print messages to the console based on whether the name is present or not\r\n         if (isNamePresent) {\r\n-            console.log(`The name '${nameToCheck}' is present in the table.`);\r\n+            console.log(`The name '${data.job_title}' is present in the table.`);\r\n         } else {\r\n-            console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n+            console.log(`The name '${data.job_title}' is NOT present in the table.`);\r\n         }\r\n \r\n         //  TestCafe assertions if needed\r\n         await t.expect(isNamePresent).ok('Name is not present in the table');\r\n@@ -131,111 +131,4 @@\n \r\n //Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n // For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n \r\n-import { ClientFunction, t, Selector } from 'testcafe';\r\n-import LoginPage from '../../Pages/LoginPage';\r\n-import Add_jobs_Pages from '../../Pages/job_pages/Add_jobs_Pages';\r\n-\r\n-const dataset = require('../../data/jobs.json')\r\n-fixture('Add job & check exist or not').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n-\r\n-//fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n-\r\n-\r\n-dataset.forEach(data => {\r\n-    test(`Add job & check - ${data.expectedResult}`, async t => {\r\n-\r\n-        //1.Login\r\n-        //For class we use .   for id we use #\r\n-        await LoginPage.SetUserName('sushobhan123');\r\n-        await LoginPage.SetPassword('Password@1234');\r\n-        await LoginPage.ClickonLoginButton();\r\n-        await Add_jobs_Pages.Click_Jobs();\r\n-        await Add_jobs_Pages.Click_AddJobs();\r\n-        await Add_jobs_Pages.Job_Title(data.job_title)\r\n-        await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n-        await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n-        await Add_jobs_Pages.Click_Submit();\r\n-        \r\n-        const actual_data = Selector('#job-table tbody');\r\n-        console.log('log2',actual_data)\r\n-        console.log('log3',actual_data.innerText)\r\n-        await t.expect(await actual_data.textContent).contains(data.job_title)\r\n-        .then(() => {\r\n-            console.log(`data is present in the list. job title:${data.job_title}`);\r\n-        })\r\n-        .catch(error => {\r\n-            console.error(`data is not present in the list. job title:${data.job_title}. Error: ${error}`);\r\n-        })\r\n-        //2.Logout\r\n-\r\n-        //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n-        //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n-        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n-        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n-\r\n-        //3.Add Job (parent) & check the list that job saved or not\r\n-\r\n-\r\n-      /*  await t.typeText('#job-title', 'Software Tester');\r\n-\r\n-        //Select company \r\n-        await t.click('#select2-company_id-container');\r\n-        await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n-        await t.wait(5000);\r\n-        await t.click('#select2-company_id-results > li');\r\n-        await t.wait(5000);\r\n-\r\n-\r\n-\r\n-        // Set Job Description inside iframe\r\n-        const iframeSelector = Selector('#description_ifr');\r\n-\r\n-        await t\r\n-            .switchToIframe(iframeSelector)\r\n-            .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n-            .switchToMainWindow()\r\n-            .wait(5000);\r\n-\r\n-\r\n-        await t.click('#submit');\r\n-        await t.wait(5000);\r\n-\r\n-\r\n-        //Check job in the list page or not \r\n-\r\n-        const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n-\r\n-        // Selector for the table\r\n-        const tableSelector = Selector('#jobDatatable');\r\n-\r\n-        // Selector for table rows\r\n-        const rowSelector = tableSelector.find('tbody tr');\r\n-        //const rowSelector = tableSelector.find('#\\32 21');\r\n-\r\n-\r\n-        // Check if the name is present in any cell of the table\r\n-        const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n-        //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n-\r\n-\r\n-        // Print messages to the console based on whether the name is present or not\r\n-        if (isNamePresent) {\r\n-            console.log(`The name '${nameToCheck}' is present in the table.`);\r\n-        } else {\r\n-            console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n-        }\r\n-\r\n-        //  TestCafe assertions if needed\r\n-        await t.expect(isNamePresent).ok('Name is not present in the table');*/\r\n-\r\n-\r\n-    })\r\n-})\r\n-\r\n-\r\n-\r\n-\r\n-//Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n-// For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n-\r\n"
                },
                {
                    "date": 1710080469289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n         // Selector for table rows\r\n         const rowSelector = tableSelector.find('tbody tr');\r\n         //const rowSelector = tableSelector.find('#\\32 21');\r\n \r\n-\r\n+        console.log('rowSelector',rowSelector)\r\n         // Check if the name is present in any cell of the table\r\n         const isNamePresent = await rowSelector.withText(data.job_title).exists;\r\n         //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n \r\n"
                },
                {
                    "date": 1710080622187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,96 +34,10 @@\n             console.error(`data is not present in the list. job title:${data.job_title}. Error: ${error}`);\r\n         })*/\r\n \r\n         \r\n-        const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n+      \r\n \r\n-        // Selector for the table\r\n-        const tableSelector = Selector('#jobDatatable');\r\n-\r\n-        // Selector for table rows\r\n-        const rowSelector = tableSelector.find('tbody tr');\r\n-        //const rowSelector = tableSelector.find('#\\32 21');\r\n-\r\n-        console.log('rowSelector',rowSelector)\r\n-        // Check if the name is present in any cell of the table\r\n-        const isNamePresent = await rowSelector.withText(data.job_title).exists;\r\n-        //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n-\r\n-\r\n-        // Print messages to the console based on whether the name is present or not\r\n-        if (isNamePresent) {\r\n-            console.log(`The name '${data.job_title}' is present in the table.`);\r\n-        } else {\r\n-            console.log(`The name '${data.job_title}' is NOT present in the table.`);\r\n-        }\r\n-\r\n-        //  TestCafe assertions if needed\r\n-        await t.expect(isNamePresent).ok('Name is not present in the table');\r\n-\r\n-        //2.Logout\r\n-\r\n-        //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n-        //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n-        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n-        //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n-\r\n-        //3.Add Job (parent) & check the list that job saved or not\r\n-\r\n-\r\n-      /*  await t.typeText('#job-title', 'Software Tester');\r\n-\r\n-        //Select company \r\n-        await t.click('#select2-company_id-container');\r\n-        await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input', 'Lehner, Haag and Smith');\r\n-        await t.wait(5000);\r\n-        await t.click('#select2-company_id-results > li');\r\n-        await t.wait(5000);\r\n-\r\n-\r\n-\r\n-        // Set Job Description inside iframe\r\n-        const iframeSelector = Selector('#description_ifr');\r\n-\r\n-        await t\r\n-            .switchToIframe(iframeSelector)\r\n-            .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n-            .switchToMainWindow()\r\n-            .wait(5000);\r\n-\r\n-\r\n-        await t.click('#submit');\r\n-        await t.wait(5000);\r\n-\r\n-\r\n-        //Check job in the list page or not \r\n-\r\n-        const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n-\r\n-        // Selector for the table\r\n-        const tableSelector = Selector('#jobDatatable');\r\n-\r\n-        // Selector for table rows\r\n-        const rowSelector = tableSelector.find('tbody tr');\r\n-        //const rowSelector = tableSelector.find('#\\32 21');\r\n-\r\n-\r\n-        // Check if the name is present in any cell of the table\r\n-        const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n-        //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n-\r\n-\r\n-        // Print messages to the console based on whether the name is present or not\r\n-        if (isNamePresent) {\r\n-            console.log(`The name '${nameToCheck}' is present in the table.`);\r\n-        } else {\r\n-            console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n-        }\r\n-\r\n-        //  TestCafe assertions if needed\r\n-        await t.expect(isNamePresent).ok('Name is not present in the table');*/\r\n-\r\n-\r\n     })\r\n })\r\n \r\n \r\n"
                },
                {
                    "date": 1710080643436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+import { ClientFunction, t, Selector } from 'testcafe';\r\n+import LoginPage from '../../Pages/LoginPage';\r\n+import Add_jobs_Pages from '../../Pages/job_pages/Add_jobs_Pages';\r\n+\r\n+const dataset = require('../../data/jobs.json')\r\n+fixture('Add job & check exist or not').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n+\r\n+\r\n+dataset.forEach(data => {\r\n+    test(`Add job & check - ${data.expectedResult}`, async t => {\r\n+\r\n+        //1.Login\r\n+        //For class we use .   for id we use #\r\n+        await LoginPage.SetUserName('sushobhan123');\r\n+        await LoginPage.SetPassword('Password@1234');\r\n+        await LoginPage.ClickonLoginButton();\r\n+        await Add_jobs_Pages.Click_Jobs();\r\n+        await Add_jobs_Pages.Click_AddJobs();\r\n+        await Add_jobs_Pages.Job_Title(data.job_title)\r\n+        await Add_jobs_Pages.SetCompanySearchClick(data.company);\r\n+        await Add_jobs_Pages.SetjobDescription(data.job_description);\r\n+        await Add_jobs_Pages.Click_Submit();\r\n+\r\n+        /*const actual_data = Selector('#job-table tbody');\r\n+        console.log('log2',actual_data)\r\n+        console.log('log3',actual_data.innerText)\r\n+        await t.expect(await actual_data.textContent).contains(data.job_title)\r\n+        .then(() => {\r\n+            console.log(`data is present in the list. job title:${data.job_title}`);\r\n+        })\r\n+        .catch(error => {\r\n+            console.error(`data is not present in the list. job title:${data.job_title}. Error: ${error}`);\r\n+        })*/\r\n+\r\n+\r\n+\r\n+\r\n+    })\r\n+})\r\n+\r\n+\r\n+\r\n+\r\n+//Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n+// For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n+\r\n"
                }
            ],
            "date": 1710010182847,
            "name": "Commit-0",
            "content": "import { Selector } from 'testcafe';\r\nfixture('Getting Started').page('https://staging.kaayu.ca/login').skipJsErrors(true)\r\n\r\n//fixture('Getting Started').page('https://admin.kaayu.ca/login').skipJsErrors(true);\r\n\r\n\r\n\r\ntest('1st test',async t => {\r\n\r\n    //1.Login\r\n    //For class we use .   for id we use #\r\n    await t.typeText('#username' , 'sushobhan123')\r\n    await t.typeText('#password' , 'Password@1234')\r\n    await t.click('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button')\r\n   // await t.pressKey ('enter')\r\n\r\n   //2.Logout\r\n\r\n   //await t.click ('body > div.wrapper > nav > ul.navbar-nav.ml-auto > li:nth-child(7) > a');\r\n   //await t.click ('body > div.swal2-container.swal2-center.swal2-backdrop-show > div > div.swal2-actions > button.swal2-confirm.swal2-styled.swal2-default-outline');\r\n   //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').exists).ok();\r\n   //await t.expect(Selector('body > div > div > div:nth-child(2) > div > div > div > div.col-lg-6.d-flex.justify-content-center.align-items-center > div > form > button').innerText).eql('Login')\r\n\r\n  //3.Add Job (parent) & check the list that job saved or not\r\n\r\n  await t.click('body > div > aside.main-sidebar.sidebar-dark-primary.elevation-4 > div > div.os-padding > div > div > nav > ul > li:nth-child(4) > a');\r\n  await t.click('#topIconPanel > a > span');\r\n  await t.typeText('#job-title' , 'Software Tester');\r\n\r\n  //Select company \r\n   await t.click('#select2-company_id-container');\r\n   await t.typeText('body > span > span > span.select2-search.select2-search--dropdown > input' , 'Lehner, Haag and Smith');\r\n   await t.wait(5000);\r\n   await t.click('#select2-company_id-results > li');\r\n   await t.wait(5000);\r\n\r\n\r\n  \r\n   // Set Job Description inside iframe\r\n   const iframeSelector = Selector('#description_ifr');\r\n\r\n   await t\r\n       .switchToIframe(iframeSelector)\r\n       .typeText('body#tinymce', 'fggggggg')  // Set the fixed text directly using the body id \"tinymce\"\r\n       .switchToMainWindow()\r\n       .wait(5000);\r\n\r\n\r\n       await t.click('#submit');\r\n       await t.wait(5000);\r\n\r\n\r\n    //Check job in the list page or not \r\n\r\n    const nameToCheck = 'Software Tester'; // Replace with the name you want to check\r\n\r\n    // Selector for the table\r\n    const tableSelector = Selector('#jobDatatable');\r\n\r\n    // Selector for table rows\r\n    const rowSelector = tableSelector.find('tbody tr');\r\n    //const rowSelector = tableSelector.find('#\\32 21');\r\n    \r\n\r\n    // Check if the name is present in any cell of the table\r\n    const isNamePresent = await rowSelector.withText(nameToCheck).exists;\r\n    //const isNamePresent = await rowSelector.withText('Software Tester2').exists;\r\n    \r\n\r\n    // Print messages to the console based on whether the name is present or not\r\n    if (isNamePresent) {\r\n        console.log(`The name '${nameToCheck}' is present in the table.`);\r\n    } else {\r\n        console.log(`The name '${nameToCheck}' is NOT present in the table.`);\r\n    }\r\n\r\n    //  TestCafe assertions if needed\r\n    await t.expect(isNamePresent).ok('Name is not present in the table');\r\n\r\n\r\n})\r\n\r\n\r\n\r\n\r\n//Run the testnpx testcafe chrome .\\Tests\\kaayu1.js\r\n// For run in terminal we have to use    npx testcafe chrome tests/ -e\r\n\r\ntest.skip('2nd test',async t => {\r\n\r\n    await t.typeText('#username' , 'sushobhan123')\r\n    await t.wait(2000)\r\n\r\n    \r\n})"
        }
    ]
}